(require 'stylish)

(stylish-register-handler 'repl 'stylish-handler-repl)

(defvar stylish-repl-history (make-ring 50)
  "History of commands you've entered into the REPL.")

(defvar stylish-repl-history-id -1
  "Which history element we're using right now.  Reset by `stylish-repl-send'.")

; custom

(defgroup stylish-repl nil
  "Stylish REPL"
  :prefix "stylish-repl-"
  :group 'stylish)

(defface stylish-repl-result-face
  '((t (:inherit font-lock-type-face)))
  "The face for the result of a REPL evaluation"
  :group 'stylish-repl)

(defface stylish-repl-error-face
  '((t (:inherit font-lock-warning-face)))
  "The face for a perl error returned as the result of a REPL evaluation"
  :group 'stylish-repl)

(defface stylish-repl-message-face
  '((t (:inherit font-lock-comment-face)))
  "The face for messages generated by the Stylish REPL"
  :group 'stylish-repl)

(defface stylish-repl-sent-face 
  '((t (:underline t)))
  "The face the query is changed to after its sent to the REPL."
  :group 'stylish-repl)

(defface stylish-repl-stdout-face
  '((t nil))
  "The face for anything sent to STDOUT on the perl side."
  :group 'stylish-repl)

(defface stylish-repl-stderr-face
  '((t :foreground "red"))
  "The face for anything sent to STDERR on the perl side."
  :group 'stylish-repl)

(defun stylish-repl nil
  "Spawn a Stylish REPL buffer"
  (interactive)
  (switch-to-buffer "*Stylish REPL*")
  (stylish-repl-mode))

(define-derived-mode stylish-repl-mode fundamental-mode "Stylish[REPL]"
  "The major mode for the Stylish REPL buffer."
  (stylish) ; XXX: version number isn't picked up if we reconnect here
  (stylish-repl-insert 
   (format "Welcome to the Stylish REPL! (Stylish %s - id %s)\n"
           (stylish-server-version) (stylish-session-id))
   'stylish-repl-message-face)
  (message "Let the hacking commence!")
  (define-key stylish-repl-mode-map (kbd "<RET>") 'stylish-repl-send)
  (define-key stylish-repl-mode-map (kbd "C-a") 'stylish-repl-beginning-of-line)
  (define-key stylish-repl-mode-map (kbd "C-c C-c") 'stylish-repl-OH-NOES)
  (define-key stylish-repl-mode-map (kbd "<up>") 'stylish-repl-history-up)
  (define-key stylish-repl-mode-map (kbd "<down>") 'stylish-repl-history-down)
  (insert-stylish-repl-prompt))

(defun stylish-repl-usual-properties (start end &optional face)
  (let ((inhibit-read-only t)) ; fuck you, read-only.
    (when face
      (put-text-property start end 'face face))
    (put-text-property start end 'read-only t)
    (put-text-property start end 'intangible t)
    (put-text-property start end 'rear-nonsticky '(read-only face intangible))))

(defun stylish-repl-insert (text &optional face)
  "Insert immutable text into the Stylish REPL buffer"
  (let ((inhibit-read-only t) (begin (point)))
    (insert text)
    (stylish-repl-usual-properties begin (point) face)))

(defun stylish-handler-repl (status result - stdout -- stderr)
  "Handle a return from the REPL"
  (with-current-buffer (get-buffer "*Stylish REPL*")
    (save-excursion 
      (goto-char (point-max))
      (unless (zerop (length stderr))
        (stylish-repl-insert (concat stderr "\n") 'stylish-repl-stderr-face))
      (unless (zerop (length stdout))
        (stylish-repl-insert (concat stdout "\n") 'stylish-repl-stdout-face))
      (let ((face (if (eq status :error) 
                      'stylish-repl-error-face 'stylish-repl-result-face)))
        (stylish-repl-insert (concat result "\n") face))
      (insert-stylish-repl-prompt))
    (goto-char (point-max))))

(defun stylish-repl-input-region-bounds nil
  "Determine the Stylish input region"
  ;; XXX: rewrite this to use properties instead of regexen!
  (save-excursion
    (let ((inhibit-point-motion-hooks t))
      (re-search-backward "PERL> "))
    (let ((start (match-end 0))
          (end   (save-excursion (end-of-line) (point))))
      (cons start end))))

(defun stylish-repl-input-region-text nil
  "Return the text inside `stylish-repl-input-region-bounds'."
  (let* ((region (stylish-repl-input-region))
         (start (car region))
         (end (cdr region))
         (text (buffer-substring-no-properties start end)))
    text))

(defun stylish-repl-send (&optional nosave)
  "Send a command to the REPL"
  (interactive)
  (let* ((region (stylish-repl-input-region-bounds))
         (start (car region))
         (end (cdr region))
         (text (stylish-repl-input-region-text)))
    (stylish-repl-usual-properties start end 'stylish-repl-sent-face)
    (stylish-send-command 'repl text)
    (unless nosave (stylish-repl-history-add text)))
  (stylish-repl-insert "\n"))

(defun stylish-repl-send-file (&optional buffer)
  "Send a file to the REPL to load"
  (interactive)
  (or buffer (setq buffer (current-buffer)))
  (let ((fn (buffer-file-name buffer)))
    (stylish-send-command 'repl-load-file fn)
    (with-current-buffer (get-buffer "*Stylish REPL*")
      (stylish-repl-insert
       (format "\n# Sending %s\n" fn) 'stylish-repl-message-face))))

(defun insert-stylish-repl-prompt nil
  "Insert the REPL prompt"
  (stylish-repl-insert "PERL>" font-lock-keyword-face)
  (stylish-repl-insert " "))

(defun stylish-repl-beginning-of-line nil
  (interactive)
  (goto-char (car (stylish-repl-input-region))))

(defun stylish-repl-OH-NOES nil
  "Reconnect to the stylish server if output gets out of sync or something"
  (interactive)
  (stylish-repl-insert "\nRestarting the Stylish REPL\n" 'stylish-repl-message-face)
  (stylish-repl)
  (sleep-for .5)
  (insert "\"ok?\"")
  (stylish-repl-send))

(defun stylish-repl-history-add (text)
  (stylish-repl-history-reset)
  (ring-insert stylish-repl-history text))

(defun stylish-repl-history-reset nil
  (setq stylish-repl-history-id -1))

(defun stylish-repl-history-up nil
  (interactive)
  (when (eq stylish-repl-history-id -1)
    (let ((current (stylish-repl-input-region-text)))
      (if (not (zerop (length current)))
          (stylish-repl-history-add current))))
  (let* ((bounds (stylish-repl-input-region-bounds))
         (start (car bounds)) (end (cdr bounds))
         (h (ring-ref stylish-repl-history (+ 1 stylish-repl-history-id))))
    (if (not h) (error "No more history!")
      (incf stylish-repl-history-id)
      (goto-char start)
      (delete-region start end)
      (insert h)
      (goto-char (point-max)))))

(defun stylish-repl-history-down nil
  (interactive)
  (when (< stylish-repl-history-id 1)
    (error "Can't look into the future!"))
  (decf stylish-repl-history-id)
  (let* ((bounds (stylish-repl-input-region-bounds))
         (start (car bounds)) (end (cdr bounds))
         (h (ring-ref stylish-repl-history stylish-repl-history-id)))
    (goto-char start)
    (delete-region start end)
    (insert h)
    (goto-char (point-max))))
